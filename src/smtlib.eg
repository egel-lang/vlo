import "prelude.eg"
import "search.eg"
import "regex.ego"
import "lexer.eg"

namespace SMTLIB (

    data whitespace
    data numeral, decimal, hexadecimal, binary, string 
    data symbol, reserved, keyword, sexpr
    data lparen, rparen

)

namespace SMTLIB (
    using System
    using Position
    using Lexer

    val break = Regex::compile "\n"
    def deltarow = [POS S -> deltax (Regex::split break S |> List::length) POS S]
    def deltacol = [POS S -> deltay (Regex::split break S |> List::last |> String::length) POS S]

    def lexemes =
    {
        whitespace " +" k deltal,
        whitespace "\t" k (deltay 4),
        whitespace "\n" (deltax 1) (sety 0),
        lparen "\\(" k (deltay 1),
        rparen "\\)" k (deltay 1),
        decimal "[1-9][0-9]*\\.[0-9]+" k deltal,
        numeral "[1-9][0-9]*" k deltal,
        hexadecimal "#x[0-9a-fA-F]*" k deltal,
        binary "#b[0-1]*" k deltal,
        string "\"(^(\"\"))*\"" deltarow deltacol,
        symbol "([~!@$%^&\\*_\\-\\+=<>\\.?/]|[a-z]|[A-Z])([~!@$%^&\\*_\\-\\+=<>\\.?/]|[a-z]|[A-Z]|[0-9])*" k deltal,
        symbol "\\|([^\\|])*\\|" deltarow deltacol
    }

    def filter_whitespace = List::filter [(T POS S) -> T /= whitespace]

)

namespace SMTLIB (
    using System
    using Search
    using Lexer

    def look = [{} -> fail {} |{T|TT} -> success T {T|TT}]

    def skip = [{} -> fail {} |{T|TT} -> success T TT]

    def eof = [{} -> success none {} |TT -> fail TT] <!> "eof expected"

    def is_token = [T0 -> look <*> [(T1 POS S) -> if T0 == T1 then skip else fail]]

    def parse_sexpr =
        (
            (is_token decimal) <+> (is_token numeral) <+> (is_token hexadecimal)
        <+> (is_token binary) <+> (is_token string) <+> (is_token symbol)
        <+> (is_token lparen <*> [(_ POS _) -> plus parse_sexpr <*> [SS -> is_token rparen <@> [_ -> sexpr POS SS]]])
        ) <!> "sexpr expected"

    def parse_full = star parse_sexpr <*> [SS -> eof <@> [_ -> SS]]

    def parse = 
        search parse_full [X _ -> X] [M TT -> throw ("parse error:" M (List::head TT))] [M TT -> throw ("parse error:" M (List::head TT))]
)

namespace SMTLIB (
    using System
 
    def cutoff = 70
 
    def spaces = [N -> List::repeat N ' ' |> pack]

    # uh, either lay out horizontally or vertically, that's what I remember
    def render =
        [ N (sexpr _ SS) -> 0
        | N (_ _ S) -> S ]

    def pretty = render 0
)

using System

def main =
    Lexer::lexify SMTLIB::lexemes "test" "(a ++) 12456 3.14 | a longer token |\nnextline"
#    Lexer::lexify SMTLIB::lexemes "test" "(a b c) d"
    |> SMTLIB::filter_whitespace
    |> SMTLIB::parse

