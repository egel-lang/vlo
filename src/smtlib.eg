import "prelude.eg"
import "search.eg"
import "regex.ego"
import "lexer.eg"

namespace SMTLIB (

    data whitespace
    data numeral, decimal, hexadecimal, binary, string 
    data symbol, reserved, keyword, sexpr
    data lparen, rparen

)

namespace SMTLIB (
    using System
    using Position
    using Lexer

    val break = Regex::compile "\n"
    def deltarow = [POS S -> deltax (Regex::split break S |> List::length) POS S]
    def deltacol = [POS S -> deltay (Regex::split break S |> List::last |> String::length) POS S]

    def lexemes =
    {
        token_class whitespace " +" k deltal,
        token_class whitespace "\t" k (deltay 4),
        token_class whitespace "\n" (deltax 1) (sety 0),
        token_class lparen "\\(" k (deltay 1),
        token_class rparen "\\)" k (deltay 1),
        token_class decimal "[1-9][0-9]*\\.[0-9]+" k deltal,
        token_class numeral "[1-9][0-9]*" k deltal,
        token_class hexadecimal "#x[0-9a-fA-F]*" k deltal,
        token_class binary "#b[0-1]*" k deltal,
        token_class string "\"(^(\"\"))*\"" deltarow deltacol,
        token_class symbol "([~!@$%^&\\*_\\-\\+=<>\\.?/]|[a-z]|[A-Z])([~!@$%^&\\*_\\-\\+=<>\\.?/]|[a-z]|[A-Z]|[0-9])*" k deltal,
        token_class symbol "\\|([^\\|])*\\|" deltarow deltacol
    }

    def filter_whitespace = List::filter [(token POS T S) -> T == whitespace]

)

namespace SMTLIB (
    using System
    using Search
    using Lexer

    def look = [{} -> fail {} |{T|TT} -> success T {T|TT}]

    def skip = [{} -> fail {} |{T|TT} -> success T TT]

    def eof = [{} -> success none {} |TT -> fail TT]

    def is_token = [T0 -> look <*> [(token POS T1 S) -> if T0 == T1 then skip else fail]]

    def pos = look <*> [(token POS T S) -> POS]

    def parse_sexpr =
            (is_token decimal <@> [(token POS T S) -> decimal POS S])
        <+> (is_token numeral <@> [(token POS T S) -> numeral POS S])
        <+> (is_token hexadecimal <@> [(token POS T S) -> hexadecimal POS S])
        <+> (is_token binary <@> [(token POS T S) -> binary POS S])
        <+> (is_token string <@> [(token POS T S) -> string POS S])
        <+> (pos <*> [POS -> is_token lparen <*> plus parse_sexpr <*> [SS -> is_token rparen <*> [_ -> sexpr POS SS]]])

    def parse_full = plus parse_sexpr <*> [SS -> eof <@> [_ -> SS]]

    def parse = search parse_full [X _ -> X] [M _ -> throw M] [M _ -> throw M]
)

using System

def main =
    Lexer::lexify SMTLIB::lexemes "test" "(a ++) 12456 3.14 | a longer token |\nnextline"
#    |> SMTLIB::parse

