import "prelude.eg"
import "regex.ego"

namespace Position (
    data position

    def to_text = [(position URL X Y) -> System::format "{} {} {}" URL X Y]

    def setx = [X (position URL _ Y) _ -> position URL X Y]

    def sety = [Y (position URL X _) _ -> position URL X Y]

    def deltax = [DX (position URL X Y) _ -> position URL (X System::+ DX) Y]

    def deltay = [DY (position URL X Y) _ -> position URL X (Y System::+ DY)]

    def deltal = [POS S -> deltay (String::length S) POS S]

    def update = [FX FY POS S -> FX (FY POS S) S ]
)

namespace Lexer (
    using Position
    using System
    using List

    def token_class_compile = [(ID REGEX FX FY) -> ID (Regex::compile REGEX) FX FY]

    def match_class = 
        [(ID R FX FY) (POS, S) -> 
            Regex::look_match R S
            ||> [ S0 -> (String::split (String::count_char S0) S) ] 
            ||> [ (S0, S1) -> (ID POS S0, (update FX FY POS S0, S1)) ]]

    def try_all = [{} X -> none | {F|FF} X -> let Y = F X in if Y == none then try_all FF X else Y]

    def lexify0 =
        [TT (_, "") -> {} 
        |TT (POS, S) -> 
            [none -> throw (format "lexer error at: {}" (Position::to_text POS))
            |(T,(POS,S)) -> {T| lexify0 TT (POS,S)}] 
                (try_all TT (POS,S))]

    def lexify = 
        [TT URL S -> lexify0 (map token_class_compile TT |> map match_class) (position URL 0 0, S)]
)

