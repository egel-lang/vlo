import "prelude.eg"
import "search.eg"
import "regex.ego"
import "lexer.eg"

namespace LTL (
    data whitespace, comment
    data lparen, rparen, colon, semicolon
    data ltl_variable
    data ltl_true, ltl_false, ltl_not, ltl_and, ltl_or, ltl_implies, ltl_iff
    data ltl_next, ltl_until, ltl_globally, ltl_finally, ltl_release, ltl_weakuntil, ltl_mightyrelease
)

namespace LTL (
    using System
    using Position
    using Lexer

    val break = Regex::compile "\n"
    def deltarow = [POS S -> deltax (Regex::split break S |> List::length) POS S]
    def deltacol = [POS S -> deltay (Regex::split break S |> List::last |> String::length) POS S]

    def lexemes =
    {
        whitespace " +" k deltal,
        whitespace "\t" k (deltay 4),
        whitespace "\n" (deltax 1) (sety 0),
        comment "#([^\\n])*" k deltal,

        lparen "\\(" k (deltay 1),
        rparen "\\)" k (deltay 1),
        colon ":" k (deltay 1),
        semicolon ";" k (deltay 1),

        ltl_true "true" k (deltay 4),
        ltl_false "false" k (deltay 5),
        ltl_not "~" k (deltay 1),
        ltl_and "/\\\\" k (deltay 2),
        ltl_or "\\\\/" k (deltay 2),
        ltl_implies "->" k (deltay 2),
        ltl_iff "<->" k (deltay 3),
        
        ltl_next "X" k (deltay 1),
        ltl_until "U" k (deltay 1),
        ltl_globally "G" k (deltay 1),
        ltl_finally "F" k (deltay 1),
        ltl_release "R" k (deltay 1),
        ltl_weakuntil "W" k (deltay 1),
        ltl_mightyrelease "M" k (deltay 1),
        
        ltl_variable "[a-zA-Z][a-zA-Z0-9]*" k deltal
    }

    def filter_whitespace = List::filter [(whitespace _ _) -> false |(comment _ _) -> false |_ -> true]

)

namespace LTL (
    using System
    using Search
    using Lexer

    def look = [{} -> fail {} |{T|TT} -> success T {T|TT}]

    def skip = [{} -> fail {} |{T|TT} -> success T TT]

    def eof = [{} -> success none {} |TT -> fail TT] <!> "eof expected"

    def is_variable = look <-> [(ltl_variable POS S) -> skip <@> [_ -> ltl_variable S]| _ -> fail]

    def is_token = [T0 -> look <-> [(T1 POS S) -> if T0 == T1 then skip <@> [_ -> T0] else fail]]

    def parse_primitive = 
        ( (is_variable) <+> (is_token ltl_true) <+> (is_token ltl_false) <+>
          (is_token lparen <*> [_ -> parse_or <*> [F -> is_token rparen <@> [_ -> F]]])
        ) <!> "primitive expected"

    def parse_unary_modality =
        (is_token ltl_next) <+> (is_token ltl_finally) <+> (is_token ltl_globally)

    def parse_binary_modality =
        (is_token ltl_until) <+> (is_token ltl_release) <+> (is_token ltl_weakuntil) <+> (is_token ltl_mightyrelease)

    def parse_modal =
        ( (parse_unary_modality <*> [M -> parse_modal <@> [F -> M F]]) <+>
          (parse_primitive </> [F0 -> parse_binary_modality <*> [M -> parse_primitive <@> [F1 -> M F0 F1]]]) ) 
        <!> "modality expected"

    def parse_not =
        ((is_token ltl_not) <*> [OP -> parse_not <@> [F -> OP F]]) <+> parse_modal

    def parse_implies =
        parse_not </> [F0 -> ((is_token ltl_implies) <+> (is_token ltl_iff)) <*> [OP -> parse_not <@> [F1 -> OP F0 F1]]]

    def parse_and =
        parse_implies </> [F0 -> (is_token ltl_and) <*> [OP -> parse_and <@> [F1 -> OP F0 F1]]]

    def parse_or =
        parse_and </> [F0 -> (is_token ltl_or) <*> [OP -> parse_or <@> [F1 -> OP F0 F1]]]

    def parse_formula = is_variable  <*> [(ltl_variable N) -> (is_token colon) <*> [_ -> parse_or <*> [F -> is_token semicolon <@> [_ -> (N, F)]]]]

    def parse_ltl = star parse_formula <*> [SS -> eof <@> [_ -> SS]]

    def parse_error =
        [M {} -> throw ("parse error:" + M + ":empty") 
        |M {T|TT} -> throw ("parse error:" + M + ":" + (to_text T))]

    def parse = 
        search parse_ltl k parse_error parse_error
)

namespace LTL (
    using System

    def to_text = 
        [ltl_true -> "true"
        |ltl_false -> "false"
        |(ltl_variable S) -> S
        |(ltl_not F) -> "~" + to_text F
        |(ltl_and F0 F1) -> "(" + to_text F0 + " /\\ " + to_text F1 + ")"
        |(ltl_or F0 F1) -> "(" + to_text F0 + " \\/ " + to_text F1 + ")"
        |(ltl_implies F0 F1) -> "(" + to_text F0 + " -> " + to_text F1 + ")"
        |(ltl_iff F0 F1) -> "(" + to_text F0 + " <-> " + to_text F1 + ")"
        |(ltl_next F) -> "X " + to_text F
        |(ltl_finally F) -> "F " + to_text F
        |(ltl_globally F) -> "G " + to_text F
        |(ltl_until F0 F1) -> "(" + to_text F0 + " U " + to_text F1 + ")"
        |(ltl_release F0 F1) -> "(" + to_text F0 + " R " + to_text F1 + ")"
        |(ltl_weakuntil F0 F1) -> "(" + to_text F0 + " W " + to_text F1 + ")"
        |(ltl_mightyrelease F0 F1) -> "(" + to_text F0 + " M " + to_text F1 + ")"]
)

namespace LTL (
    using System

    def simplify = 
        [ltl_true -> ltl_true
        |ltl_false -> ltl_false
        |(ltl_variable S) -> ltl_variable S
        |(ltl_not F) -> ltl_not (simplify F)
        |(ltl_and F0 F1) -> ltl_and (simplify F0) (simplify F1)
        |(ltl_or F0 F1) -> ltl_or (simplify F0) (simplify F1)
        |(ltl_implies F0 F1) -> ltl_or (ltl_not (simplify F0)) (simplify F1) #eliminate
        |(ltl_iff F0 F1) -> simplify (ltl_and (ltl_implies F0 F1) (ltl_implies F1 F0)) #eliminate
        |(ltl_next F) -> ltl_next (simplify F)
        |(ltl_finally F) -> ltl_until ltl_true (simplify F) #eliminate
        |(ltl_globally F) -> simplify (ltl_release ltl_false F) #eliminate
        |(ltl_until F0 F1) -> (ltl_until (simplify F0) (simplify F1))
        |(ltl_release F0 F1) -> (ltl_release (simplify F0) (simplify F1))
        |(ltl_weakuntil F0 F1) -> simplify (ltl_release F1 (ltl_or F1 F0)) #eliminate
        |(ltl_mightyrelease F0 F1) -> simplify (ltl_until F1 (ltl_and F0 F1))] #eliminiate
)

using System

def main =
    Lexer::lexify LTL::lexemes "test" """
form0: GX foo;
form1: b /\ (false -> c);
"""
    |> LTL::filter_whitespace
    |> LTL::parse
    |> List::map [(N, F) -> (N, LTL::simplify F)]
    |> List::map [(N, F) -> (N, LTL::to_text F)]
#    |> List::map LTL::pretty
#    |> List::map [S -> print S "\n"]; none

